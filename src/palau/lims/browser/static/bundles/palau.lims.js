/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./components/reference_other.js":
/*!***************************************!*\
  !*** ./components/reference_other.js ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* provided dependency */ var $ = __webpack_require__(/*! jquery */ \"jquery\");\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return _typeof(key) === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (_typeof(input) !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (_typeof(res) !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\n/* Please use this command to compile this file into the proper folder:\ncoffee --no-header -w -o ../ -c reference_other.coffee\n*/\nvar ReferenceOtherController;\n\n/*\nThis controller is in charge of handling the behavior of ReferenceOtherWidget\n*/\nReferenceOtherController = /*#__PURE__*/function () {\n  function ReferenceOtherController() {\n    _classCallCheck(this, ReferenceOtherController);\n    var el, field_name, i, len, ref;\n    /*\n    Binds callbacks on elements\n    Attaches all the events to the body and refine the selector to delegate the\n    event: https://learn.jquery.com/events/event-delegation/\n    */\n    this.bind_event_handler = this.bind_event_handler.bind(this);\n    /*\n    Returns a list of fieldnames with a reference widget bound\n    */\n    this.get_field_names = this.get_field_names.bind(this);\n    /*\n    Returns the HTML element where other is rendered\n    */\n    this.get_other_reference_element = this.get_other_reference_element.bind(this);\n    /*\n    Returns the HTML element where the search input is rendered\n    */\n    this.get_search_reference_element = this.get_search_reference_element.bind(this);\n    /*\n    Returns the HTML element with the other text\n    */\n    this.get_other_check_element = this.get_other_check_element.bind(this);\n    /*\n    Returns the HTML element with the other text\n    */\n    this.get_other_text_element = this.get_other_text_element.bind(this);\n    this.has_references = this.has_references.bind(this);\n    /*\n    Event triggered when the checkbox 'Other' is selected\n    */\n    this.on_reference_other_selector_change = this.on_reference_other_selector_change.bind(this);\n    /*\n    Event triggered when a reference is selected\n    */\n    this.on_reference_selected = this.on_reference_selected.bind(this);\n    /*\n    Event triggered when areference is deselected\n    */\n    this.on_reference_deselected = this.on_reference_deselected.bind(this);\n    this.reference_other_selector = \"input.reference-otherfield-check\";\n    this.reference_value_selector = \"div.palau-referenceother-widget-input\";\n    // Bind the event handler to the elements\n    this.bind_event_handler();\n    ref = this.get_field_names();\n    // hide/show all \"Other\" fields from ReferenceOtherWidget\n    for (i = 0, len = ref.length; i < len; i++) {\n      field_name = ref[i];\n      if (this.has_references(field_name)) {\n        el = this.get_other_reference_element(field_name);\n        el.hide();\n      } else {\n        el = this.get_other_check_element(field_name);\n        $(el).trigger(\"change\");\n      }\n    }\n    return this;\n  }\n  _createClass(ReferenceOtherController, [{\n    key: \"bind_event_handler\",\n    value: function bind_event_handler() {\n      $(\"body\").on(\"change\", this.reference_other_selector, this.on_reference_other_selector_change);\n      $(\"body\").on(\"select\", this.reference_value_selector, this.on_reference_selected);\n      return $(\"body\").on(\"deselect\", this.reference_value_selector, this.on_reference_deselected);\n    }\n  }, {\n    key: \"get_field_names\",\n    value: function get_field_names() {\n      var element, elements, field_names, i, len;\n      field_names = [];\n      elements = document.querySelectorAll(this.reference_value_selector);\n      for (i = 0, len = elements.length; i < len; i++) {\n        element = elements[i];\n        field_names.push($(element).attr(\"id\"));\n      }\n      return field_names;\n    }\n  }, {\n    key: \"get_other_reference_element\",\n    value: function get_other_reference_element(field_name) {\n      var el, selector;\n      selector = \"#\" + field_name + \"_other_field\";\n      el = document.querySelector(selector);\n      return $(el);\n    }\n  }, {\n    key: \"get_search_reference_element\",\n    value: function get_search_reference_element(field_name) {\n      var el, selector;\n      selector = \"div.uidreferencefield[id='\" + field_name + \"']\";\n      el = document.querySelector(selector);\n      return $(el);\n    }\n  }, {\n    key: \"get_other_check_element\",\n    value: function get_other_check_element(field_name) {\n      var el, selector;\n      selector = \"#\" + field_name + \"_checkbox\";\n      el = document.querySelector(selector);\n      return $(el);\n    }\n  }, {\n    key: \"get_other_text_element\",\n    value: function get_other_text_element(field_name) {\n      var el, selector;\n      selector = \"#\" + field_name + \"_other\";\n      el = document.querySelector(selector);\n      return $(el);\n    }\n  }, {\n    key: \"has_references\",\n    value: function has_references(field_name) {\n      var el, selector;\n      selector = \"textarea[name='\".concat(field_name, \"'].queryselectwidget-value\");\n      el = document.querySelector(selector);\n      if (!el) {\n        return;\n      }\n      if ($(el).val()) {\n        return true;\n      }\n      return false;\n    }\n  }, {\n    key: \"on_reference_other_selector_change\",\n    value: function on_reference_other_selector_change(event) {\n      var el, field_name, other, search;\n      el = event.currentTarget;\n      field_name = $(el).attr(\"data_field\");\n      other = this.get_other_text_element(field_name);\n      search = this.get_search_reference_element(field_name);\n      if (el.checked) {\n        // display the text box for manual entry\n        other.show();\n        // hide the reference widget selector\n        return search.hide();\n      } else {\n        // hide the text box for manual entry\n        other.hide();\n        other.val(\"\");\n        // display the reference widget selector\n        return search.show();\n      }\n    }\n  }, {\n    key: \"on_reference_selected\",\n    value: function on_reference_selected(event) {\n      var el, field_name, other, other_checkbox;\n      el = event.currentTarget;\n      field_name = $(el).attr(\"id\");\n      // Uncheck and hide the \"Other\" checkbox\n      other_checkbox = this.get_other_check_element(field_name);\n      other_checkbox.checked = false;\n      other = this.get_other_reference_element(field_name);\n      return other.hide();\n    }\n  }, {\n    key: \"on_reference_deselected\",\n    value: function on_reference_deselected(event) {\n      var el, field_name, other;\n      el = event.currentTarget;\n      field_name = $(el).attr(\"id\");\n      // Show the \"Other\" checkbox\n      other = this.get_other_reference_element(field_name);\n      return other.show();\n    }\n  }]);\n  return ReferenceOtherController;\n}();\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (ReferenceOtherController);\n\n//# sourceURL=webpack:///./components/reference_other.js?");

/***/ }),

/***/ "./components/sampletype_container.js":
/*!********************************************!*\
  !*** ./components/sampletype_container.js ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* provided dependency */ var $ = __webpack_require__(/*! jquery */ \"jquery\");\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return _typeof(key) === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (_typeof(input) !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (_typeof(res) !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\n/* Please use this command to compile this file into the proper folder:\ncoffee --no-header -w -o ../ -c sampletype_container.coffee\n*/\nvar SampleTypeContainerController,\n  indexOf = [].indexOf;\n\n/*\nThis controller is in charge of displaying the suitable widget/control for\ncontainer selection depending on the selected sample type.\nSample Type content type has the field \"ContainerWidget\" that allows the user to\ndefine the control to display in Add sample form or sample view depending on the\nsample type selected.\nIf the selected Sample Type has the widget \"bottles\" selected, the system hides\nthe \"Container\" field from the form and displays \"Bottles\" field instead.\nhttps://github.com/beyondessential/pnghealth.lims/issues/28\n*/\nSampleTypeContainerController = /*#__PURE__*/function () {\n  function SampleTypeContainerController() {\n    _classCallCheck(this, SampleTypeContainerController);\n    var bottles, el, j, len, ref;\n    /*\n    Returns whether this controller needs to be loaded or not\n    */\n    this.is_required = this.is_required.bind(this);\n    /*\n    Binds callbacks on elements\n    Attaches all the events to the body and refine the selector to delegate the\n    event: https://learn.jquery.com/events/event-delegation/\n    */\n    this.bind_event_handler = this.bind_event_handler.bind(this);\n    /*\n    Event triggered when the value for Sample Template field changes\n    Checks for the selection control widget assigned to the Sample Type the\n    selected Template is assigned to and hides/display other fields (Bottles,\n    Container) accordingly.\n    */\n    this.on_template_selected = this.on_template_selected.bind(this);\n    /*\n    Event triggered when the weight value of a record from inside the Bottles\n    widget is changed. Calculates the sample volume of each bottle as the\n    difference between the weight set and the bottle's dry weight\n    */\n    this.on_bottle_weight_change = this.on_bottle_weight_change.bind(this);\n    /*\n    Event triggered when the container value of a record from inside the Bottles\n    widget changes. Calculates the sample volume of each bottle as the difference\n    between the weight set and the bottle's dry weight\n    */\n    this.on_bottle_container_blur = this.on_bottle_container_blur.bind(this);\n    /*\n    Event triggered when the value for Sample Type field changes.\n    Checks for the selection control widget assigned to the Sample Type and\n    hides/display other fields (Bottles, Container) in accordance\n    */\n    this.on_sample_type_selected = this.on_sample_type_selected.bind(this);\n    /*\n    Returns the column/sample index of the Add form for the element passed in\n    */\n    this.get_sample_index = this.get_sample_index.bind(this);\n    /*\n    Updates the type of widget to display as container (traditional Container or\n    Bottles) depending on the values set for Sample Type and/or Sample Template\n    */\n    this.update_container = this.update_container.bind(this);\n    /*\n    Sets the visibility of both the \"Container\" field and the \"Bottles\" field\n    Displays the \"Container\" and hides the \"Bottles\" if true\n    */\n    this.toggle_container_visibility = this.toggle_container_visibility.bind(this);\n    /*\n    Sets the readonly mode of the Volume field\n    */\n    this.set_volume_readonly = this.set_volume_readonly.bind(this);\n    /*\n    Calculates the volumes of each bottle and the total volume of the sample\n    */\n    this.calculate_volume = this.calculate_volume.bind(this);\n    /*\n    Returns the value of the element passed-in as a float number\n    */\n    this.get_float_value = this.get_float_value.bind(this);\n    /*\n    Rounds a number to the given decimals number\n    */\n    this.round = this.round.bind(this);\n    /*\n    Sets the visibility of the field with the given name\n    */\n    this.set_visible = this.set_visible.bind(this);\n    /*\n    Fetches the object with the UID passed-in\n    */\n    this.fetch = this.fetch.bind(this);\n    /*\n    Ajax Submit with automatic event triggering and some sane defaults\n    */\n    this.ajax_submit = this.ajax_submit.bind(this);\n    /*\n    Returns the portal url (calculated in code)\n    */\n    this.get_portal_url = this.get_portal_url.bind(this);\n    /*\n    Prints a debug message in console with this component name prefixed\n    */\n    this.debug = this.debug.bind(this);\n    /*\n    Returns the AnalysisRequestAdd controller\n    */\n    this.get_add_controller = this.get_add_controller.bind(this);\n    // Do not load this controller unless required\n    if (!this.is_required()) {\n      return;\n    }\n    this.debug(\"load\");\n    this.sample_type_selector = \"div.uidreferencefield textarea[name^='SampleType']\";\n    this.template_selector = \"input[id^='Template']\";\n    this.bottle_weights_selector = \"input[id^='Bottles-'][id*='-Weight-']\";\n    this.bottle_containers_selector = \"input[id^='Bottles-'][id*='-Container-']\";\n    // Bind the event handler to the elements\n    this.bind_event_handler();\n    // Trigger the \"select\" event for SampleType to show/Hide Container/Bottles\n    if (indexOf.call(document.body.classList, \"template-ar_add\") >= 0) {\n      ref = document.querySelectorAll(this.sample_type_selector);\n      for (j = 0, len = ref.length; j < len; j++) {\n        el = ref[j];\n        $(el).trigger(\"select\");\n      }\n    } else {\n      bottles = document.querySelector(\"div[data-fieldname='Bottles']\");\n      if (bottles) {\n        el = document.querySelector(\"input[id='Volume']\");\n        el.setAttribute(\"readonly\", \"readonly\");\n      }\n    }\n    return this;\n  }\n  _createClass(SampleTypeContainerController, [{\n    key: \"is_required\",\n    value: function is_required() {\n      var clazz, i, j, len, ref, targets;\n      targets = [\"template-ar_add\", \"portaltype-analysisrequest\"];\n      ref = document.body.classList;\n      for (i = j = 0, len = ref.length; j < len; i = ++j) {\n        clazz = ref[i];\n        if (targets.includes(clazz)) {\n          return true;\n        }\n      }\n      return false;\n    }\n  }, {\n    key: \"bind_event_handler\",\n    value: function bind_event_handler() {\n      this.debug(\"bind_event_handler\");\n      $(\"body\").on(\"SampleType:after_change\", this.sample_type_selector, this.on_sample_type_selected);\n      $(\"body\").on(\"selected\", this.template_selector, this.on_template_selected);\n      $(\"body\").on(\"blur\", this.bottle_containers_selector, this.on_bottle_container_blur);\n      return $(\"body\").on(\"change\", this.bottle_weights_selector, this.on_bottle_weight_change);\n    }\n  }, {\n    key: \"on_template_selected\",\n    value: function on_template_selected(event) {\n      var el, idx, uid;\n      this.debug(\"on_template_selected\");\n      el = event.currentTarget;\n      // Get the index of the column (each column represents a Sample)\n      idx = this.get_sample_index(el);\n      // UID of the Sample Template selected\n      uid = $(\"#\".concat(el.id)).attr(\"uid\");\n      if (!uid) {\n        return;\n      }\n      // Find-out the sample type assigned to this template\n      // Do nothing. Rely on sample type value instead\n      return this.fetch(uid, []).done(function (data) {\n        var sample_type_uid;\n        if (data) {\n          // Update the sample container\n          sample_type_uid = data[\"SampleType_uid\"];\n          return this.update_container(idx, sample_type_uid);\n        }\n      });\n    }\n  }, {\n    key: \"on_bottle_weight_change\",\n    value: function on_bottle_weight_change(event) {\n      var el, sample_idx;\n      this.debug(\"on_bottle_weight_change\");\n      el = event.currentTarget;\n      // Get the index of the column (each column represents a Sample)\n      sample_idx = this.get_sample_index(el);\n      // Recalculate the volume of the bottles and sample\n      return this.calculate_volume(sample_idx);\n    }\n  }, {\n    key: \"on_bottle_container_blur\",\n    value: function on_bottle_container_blur(event) {\n      var el, sample_idx;\n      this.debug(\"on_bottle_container_blur\");\n      el = event.currentTarget;\n      // Get the index of the column (each column represents a Sample)\n      sample_idx = this.get_sample_index(el);\n      // Recalculate the volume of the bottles and sample\n      return this.calculate_volume(sample_idx);\n    }\n  }, {\n    key: \"on_sample_type_selected\",\n    value: function on_sample_type_selected(event) {\n      var el, idx;\n      this.debug(\"on_sample_type_selected\");\n      el = event.currentTarget;\n      // Get the index of the column (each column represents a Sample)\n      idx = this.get_sample_index(el);\n      // Update the container with the selected UID\n      return this.update_container(idx, el.value);\n    }\n  }, {\n    key: \"get_sample_index\",\n    value: function get_sample_index(element) {\n      var parent;\n      this.debug(\"get_sample_index:element=\".concat(element.id));\n      parent = element.closest(\"td[arnum]\");\n      if (!parent) {\n        return null;\n      }\n      return $(parent).attr(\"arnum\");\n    }\n  }, {\n    key: \"update_container\",\n    value: function update_container(sample_index, sample_type_uid) {\n      var field_name;\n      this.debug(\"update_container:sample_index=\".concat(sample_index, \",sample_type_uid=\").concat(sample_type_uid));\n      if (!sample_type_uid) {\n        // By default, show Container and hide Bottles\n        this.toggle_container_visibility(sample_index, true);\n        // Volume field is editable\n        return this.set_volume_readonly(sample_index, false);\n      } else {\n        // Find-out the control to use for this sample type\n        field_name = \"ContainerWidget\";\n        return this.fetch(sample_type_uid, field_name).done(function (data) {\n          var show_container;\n          show_container = false;\n          if (data) {\n            show_container = data[field_name] === \"container\";\n          }\n          // Toggle the visibility of Container field vs Bottles field\n          this.toggle_container_visibility(sample_index, show_container);\n          // Enable/Disable Volume depending on the visibility of Container\n          this.set_volume_readonly(sample_index, !show_container);\n          if (!show_container) {\n            // Volume field is calculated automatically\n            return this.calculate_volume(sample_index);\n          }\n        });\n      }\n    }\n  }, {\n    key: \"toggle_container_visibility\",\n    value: function toggle_container_visibility(sample_index, show_container) {\n      this.debug(\"toggle_container_visibility:sample_index=\".concat(sample_index, \",show_container=\").concat(show_container));\n      this.set_visible(\"Container\", sample_index, show_container);\n      return this.set_visible(\"Bottles\", sample_index, !show_container);\n    }\n  }, {\n    key: \"set_volume_readonly\",\n    value: function set_volume_readonly(sample_index, readonly) {\n      var el, selector;\n      this.debug(\"set_volume_readonly:sample_index=\".concat(sample_index, \",readonly=\").concat(readonly));\n      selector = \"#Volume\";\n      if (sample_index) {\n        selector = \"#Volume-\".concat(sample_index);\n      }\n      el = document.querySelector(selector);\n      if (!el) {\n        return;\n      }\n      if (readonly) {\n        return el.setAttribute(\"readonly\", \"readonly\");\n      } else {\n        return el.removeAttribute(\"readonly\");\n      }\n    }\n  }, {\n    key: \"calculate_volume\",\n    value: function calculate_volume(sample_index) {\n      var elements, selector, that, total_volume, volume, volume_selector;\n      this.debug(\"calculate_volume:sample_index=\".concat(sample_index));\n      total_volume = 0;\n      // Walk-through all record rows from Bottles Widget\n      selector = \"tr.records_row_Bottles\";\n      if (sample_index) {\n        selector = \"tr.records_row_Bottles-\".concat(sample_index);\n      }\n      elements = document.querySelectorAll(selector);\n      that = this;\n      $.each(elements, function (index, el) {\n        var dry_weight, dry_weight_selector, vol, volume, volume_selector, weight, weight_selector;\n        // Calculate the weight and dry weight of the bottle\n        weight_selector = \"#Bottles-Weight-\".concat(index);\n        if (sample_index) {\n          weight_selector = \"#Bottles-\".concat(sample_index, \"-Weight-\").concat(index);\n        }\n        weight = el.querySelector(weight_selector);\n        weight = that.get_float_value(weight);\n        that.debug(\"Not a valid volume: \".concat(weight));\n        dry_weight_selector = \"#Bottles-DryWeight-\".concat(index);\n        if (sample_index) {\n          dry_weight_selector = \"#Bottles-\".concat(sample_index, \"-DryWeight-\").concat(index);\n        }\n        dry_weight = el.querySelector(dry_weight_selector);\n        dry_weight = that.get_float_value(dry_weight);\n        that.debug(\"Not a valid volume: \".concat(dry_weight));\n        // Calculate the weight difference\n        vol = weight - dry_weight;\n        // XXX What to do if volume <= 0 ?\n        if (vol <= 0) {\n          that.debug(\"Not a valid bottle volume: \".concat(vol));\n          vol = \"\";\n        } else {\n          // Multiply the difference of weights by 1.05 to get the mL\n          vol = that.round(vol * 1.05, 3);\n          total_volume = total_volume + vol;\n        }\n        volume_selector = \"#Bottles-Volume-\".concat(index);\n        if (sample_index) {\n          volume_selector = \"#Bottles-\".concat(sample_index, \"-Volume-\").concat(index);\n        }\n        volume = el.querySelector(volume_selector);\n        return volume.value = vol;\n      });\n      total_volume = parseFloat(total_volume);\n      total_volume = this.round(total_volume, 4);\n      if (total_volume <= 0) {\n        this.debug(\"Not a valid volume: \".concat(total_volume));\n        total_volume = \"\";\n      } else {\n        total_volume += \" ml\";\n      }\n      // Update the total volume\n      volume_selector = \"#Volume\";\n      if (sample_index) {\n        volume_selector = \"#Volume-\".concat(sample_index);\n      }\n      volume = document.querySelector(volume_selector);\n      if (!volume) {\n        return;\n      }\n      return volume.value = total_volume;\n    }\n  }, {\n    key: \"get_float_value\",\n    value: function get_float_value(el) {\n      var default_value = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      var val;\n      val = parseFloat(el.value);\n      if (isNaN(val)) {\n        val = parseFloat(default_value);\n      }\n      return val;\n    }\n  }, {\n    key: \"round\",\n    value: function round(value) {\n      var decimals = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 2;\n      return Number(Math.round(value + 'e' + decimals) + 'e-' + decimals);\n    }\n  }, {\n    key: \"set_visible\",\n    value: function set_visible(field_name, sample_index, visible) {\n      var cols_num, el, selector;\n      this.debug(\"set_visible:field_name=\".concat(field_name, \",sample_index=\").concat(sample_index, \",visible=\").concat(visible));\n      // Default field selector\n      selector = \"div[data-fieldname='\".concat(field_name, \"']\");\n      if (sample_index) {\n        selector = \"div[data-fieldname='\".concat(field_name, \"-\").concat(sample_index, \"']\");\n      }\n      // If there is only one sample (column), just hide/show the whole row\n      if (sample_index === \"0\") {\n        cols_num = document.querySelector(\"#ar_count\");\n        if (cols_num.value === \"1\") {\n          selector = \"tr[fieldname=\".concat(field_name, \"]\");\n        }\n      }\n      el = document.querySelector(selector);\n      if (visible) {\n        return $(el).show();\n      } else {\n        return $(el).hide();\n      }\n    }\n  }, {\n    key: \"fetch\",\n    value: function fetch(uid, field_names) {\n      var deferred, options;\n      this.debug(\"fetch:uid=\".concat(uid, \",field_names=\").concat(field_names));\n      deferred = $.Deferred();\n      options = {\n        url: this.get_portal_url() + \"/@@API/read\",\n        data: {\n          catalog_name: \"senaite_catalog_setup\",\n          UID: uid,\n          include_fields: field_names,\n          page_size: 1\n        }\n      };\n      this.ajax_submit(options).done(function (data) {\n        var object;\n        object = {};\n        if (data.objects) {\n          // resolve with the first item of the list\n          object = data.objects[0];\n        }\n        return deferred.resolveWith(this, [object]);\n      });\n      return deferred.promise();\n    }\n  }, {\n    key: \"ajax_submit\",\n    value: function ajax_submit() {\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var done;\n      this.debug(\"ajax_submit\");\n      // some sane option defaults\n      if (options.type == null) {\n        options.type = \"POST\";\n      }\n      if (options.url == null) {\n        options.url = this.get_portal_url();\n      }\n      if (options.context == null) {\n        options.context = this;\n      }\n      if (options.dataType == null) {\n        options.dataType = \"json\";\n      }\n      if (options.data == null) {\n        options.data = {};\n      }\n      if (options._authenticator == null) {\n        options._authenticator = $(\"input[name='_authenticator']\").val();\n      }\n      this.debug(\">>> ajax_submit::options=\", options);\n      $(this).trigger(\"ajax:submit:start\");\n      done = function done() {\n        return $(this).trigger(\"ajax:submit:end\");\n      };\n      return $.ajax(options).done(done);\n    }\n  }, {\n    key: \"get_portal_url\",\n    value: function get_portal_url() {\n      var url;\n      url = $(\"input[name=portal_url]\").val();\n      return url || window.portal_url;\n    }\n  }, {\n    key: \"debug\",\n    value: function debug(message) {\n      return console.debug(\"[palau.lims]\", \"SampleTypeController::\" + message);\n    }\n  }, {\n    key: \"get_add_controller\",\n    value: function get_add_controller() {\n      return window.bika.lims.AnalysisRequestAdd;\n    }\n  }]);\n  return SampleTypeContainerController;\n}();\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (SampleTypeContainerController);\n\n//# sourceURL=webpack:///./components/sampletype_container.js?");

/***/ }),

/***/ "./components/sampleview_layout.js":
/*!*****************************************!*\
  !*** ./components/sampleview_layout.js ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* provided dependency */ var $ = __webpack_require__(/*! jquery */ \"jquery\");\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return _typeof(key) === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (_typeof(input) !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (_typeof(res) !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\n/* Please use this command to compile this file into the proper folder:\ncoffee --no-header -w -o ../ -c sampleview_layout.coffee\n*/\nvar SampleViewLayoutController;\n\n/*\nThis controller makes possible to collapse and expand sections from sample view\nand keep the configuration stored in a cookie. This prevents the user to have to\nconstantly scroll as they enter and verify results.\nhttps://github.com/beyondessential/pnghealth.lims/issues/163\n*/\nSampleViewLayoutController = /*#__PURE__*/function () {\n  function SampleViewLayoutController() {\n    _classCallCheck(this, SampleViewLayoutController);\n    var j, len, section, sections;\n    /*\n    Returns whether this controller needs to be loaded or not\n    */\n    this.is_required = this.is_required.bind(this);\n    /*\n    Event triggered when a toggle selector is clicked. Toggles the visibility of\n    the section associated to the toggle selector and stores the visibility into\n    a cookie\n    */\n    this.on_toggle_selector_clicked = this.on_toggle_selector_clicked.bind(this);\n    /*\n    Initializes a toggle selector\n    */\n    this.init_toggle = this.init_toggle.bind(this);\n    /*\n    Sets the visibility of sample sections based on the configuration stored in\n    cookies\n    */\n    this.init_sections_visibility = this.init_sections_visibility.bind(this);\n    /*\n    Prints a debug message in console with this component name prefixed\n    */\n    this.debug = this.debug.bind(this);\n    // Do not load this controller unless required\n    if (!this.is_required()) {\n      return;\n    }\n    this.debug(\"load\");\n    // List of [anchor_selector, section_selector, section_id]\n    sections = [[\"#content h1\", \"#senaite-sampleheader\", \"palau-lims-sample-header\"], [\"#content h1\", \"div[id=ar-attachments]\", \"palau-lims-sample-header\"], [\"div.remarks-widget h3\", \"div.remarks-widget div\", \"palau-lims-sample-remarks-section\"], [\"div.analysis-listing-table h3\", \"div.analysis-listing-table form\", \"palau-lims-sample-analyses-section\"], [\"div[id=results-interpretation] h3\", \"div[id=results-interpretation] form\", \"palau-lims-sample-results-interpretation-section\"]];\n    // Initializes toggle sections\n    for (j = 0, len = sections.length; j < len; j++) {\n      section = sections[j];\n      this.init_toggle(section[0], section[1], section[2]);\n    }\n    // Bind the event handler to the elements\n    $(\"body\").on(\"click\", \".toggle_selector\", this.on_toggle_selector_clicked);\n    // Show/Hide sections depending on the cookie value(s)\n    this.init_sections_visibility();\n    return this;\n  }\n  _createClass(SampleViewLayoutController, [{\n    key: \"is_required\",\n    value: function is_required() {\n      var clazz, i, j, len, ref, targets;\n      targets = [\"portaltype-analysisrequest\"];\n      ref = document.body.classList;\n      for (i = j = 0, len = ref.length; j < len; i = ++j) {\n        clazz = ref[i];\n        if (targets.includes(clazz)) {\n          return true;\n        }\n      }\n      return false;\n    }\n  }, {\n    key: \"on_toggle_selector_clicked\",\n    value: function on_toggle_selector_clicked(event) {\n      var el, j, len, section, section_id, sections, visible;\n      this.debug(\"on_toggle_selector_clicked\");\n      el = event.currentTarget;\n      section_id = el.getAttribute(\"target-section\");\n      sections = document.querySelectorAll(\"[section=\".concat(section_id, \"]\"));\n      for (j = 0, len = sections.length; j < len; j++) {\n        section = sections[j];\n        if (!section) {\n          continue;\n        }\n        visible = this.is_visible(section);\n        if (visible) {\n          $(section).hide();\n        } else {\n          $(section).show();\n        }\n      }\n      return site.set_cookie(section_id, !visible);\n    }\n  }, {\n    key: \"init_toggle\",\n    value: function init_toggle(anchor_selector, section_selector, section_id) {\n      var anchor, section;\n      this.debug(\"init_toggle:anchor_selector='\".concat(anchor_selector, \"',section_selector='\").concat(section_selector, \"',section_id='\").concat(section_id, \"'\"));\n      anchor = document.querySelector(anchor_selector);\n      if (!anchor) {\n        return;\n      }\n      anchor.classList.add(\"toggle_selector\");\n      anchor.setAttribute(\"target-section\", section_id);\n      section = document.querySelector(section_selector);\n      if (!section) {\n        return;\n      }\n      return section.setAttribute(\"section\", section_id);\n    }\n\n    /*\n    Returns whether the element is visible or not\n    */\n  }, {\n    key: \"is_visible\",\n    value: function is_visible(element) {\n      if ($(element).css(\"display\") === \"none\") {\n        return false;\n      }\n      return true;\n    }\n  }, {\n    key: \"init_sections_visibility\",\n    value: function init_sections_visibility() {\n      var anchor, anchors, j, len, results, section, section_id, sections, selector, visible;\n      this.debug(\"set_visibility\");\n      selector = \".toggle_selector\";\n      anchors = document.querySelectorAll(\".toggle_selector\");\n      results = [];\n      for (j = 0, len = anchors.length; j < len; j++) {\n        anchor = anchors[j];\n        section_id = anchor.getAttribute(\"target-section\");\n        visible = site.read_cookie(section_id) || \"true\";\n        this.debug(\"section_id=\".concat(section_id, \", visible=\").concat(visible));\n        visible = visible === \"true\";\n        sections = document.querySelectorAll(\"[section=\".concat(section_id, \"]\"));\n        results.push(function () {\n          var k, len1, results1;\n          results1 = [];\n          for (k = 0, len1 = sections.length; k < len1; k++) {\n            section = sections[k];\n            if (visible) {\n              results1.push($(section).show());\n            } else {\n              results1.push($(section).hide());\n            }\n          }\n          return results1;\n        }());\n      }\n      return results;\n    }\n  }, {\n    key: \"debug\",\n    value: function debug(message) {\n      return console.debug(\"[palau.lims]\", \"SampleViewLayoutController::\" + message);\n    }\n  }]);\n  return SampleViewLayoutController;\n}();\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (SampleViewLayoutController);\n\n//# sourceURL=webpack:///./components/sampleview_layout.js?");

/***/ }),

/***/ "./palau.lims.js":
/*!***********************!*\
  !*** ./palau.lims.js ***!
  \***********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _components_sampletype_container_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./components/sampletype_container.js */ \"./components/sampletype_container.js\");\n/* harmony import */ var _components_sampleview_layout_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./components/sampleview_layout.js */ \"./components/sampleview_layout.js\");\n/* harmony import */ var _components_reference_other_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./components/reference_other.js */ \"./components/reference_other.js\");\n\n\n\ndocument.addEventListener(\"DOMContentLoaded\", function () {\n  console.debug(\"*** PALAU LIMS JS LOADED ***\");\n\n  // Initialize controllers\n  window.sampletype_container = new _components_sampletype_container_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"]();\n  window.sampleview_layout = new _components_sampleview_layout_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"]();\n  window.reference_other = new _components_reference_other_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"]();\n});\n\n//# sourceURL=webpack:///./palau.lims.js?");

/***/ }),

/***/ "./scss/palau.lims.scss":
/*!******************************!*\
  !*** ./scss/palau.lims.scss ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n// extracted by mini-css-extract-plugin\n\n\n//# sourceURL=webpack:///./scss/palau.lims.scss?");

/***/ }),

/***/ "jquery":
/*!*************************!*\
  !*** external "jQuery" ***!
  \*************************/
/***/ ((module) => {

module.exports = jQuery;

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	__webpack_require__("./palau.lims.js");
/******/ 	var __webpack_exports__ = __webpack_require__("./scss/palau.lims.scss");
/******/ 	
/******/ })()
;